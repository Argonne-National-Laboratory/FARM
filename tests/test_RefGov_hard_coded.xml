<Simulation verbosity="silent">
  <!-- Simulation section must be on the OUTERMOST LAYER of input file, otherwise won't run. -->
  <!-- verbosity="silent" means only simulation-breaking errors are displayed. -->
  <TestInfo>
    <name>plugins/FARM.RG_SIMO_hardcoded</name>
    <author>HaoyuWang</author>
    <created>2020-04-28</created>
    <classesTested>Models.ExternalModel.FARM</classesTested>
    <description>
      This is a test run of single reference governor.
    </description>
    <requirements> </requirements>
  </TestInfo>
  <!-- TestInfo is the description part of input xml file, won't run -->

  <RunInfo>
    <WorkingDir>RefGov_hard_coded_Test</WorkingDir>
     <!-- WorkingDir shows the path to a directory (w.r.t the location of this xml file)
     that will store all the results of the calculations and where RAVEN looks for the
     files specified in the block <Files>. -->
    <Sequence>RGrun,printTOfile</Sequence>
     <!-- Sequence is an ordered list of the step names that RAVEN will run. The steps
     in the list are defined in the <Steps> section of the input file -->
     <!-- WorkingDir and Sequence are the only two required section -->
  </RunInfo>
  <!-- In the RunInfo block, the user specifies how the overall computation should be run. -->

  <Models>
    <ExternalModel name="RG" subType="FARM.RG_SIMO_1">
       <!-- ExternalModel is an entity existing outside the RAVEN framework and embedded in
       the RAVEN code at run time -->
       <variables> P1, V1, V1min, V1max</variables>
       <!-- <variables> sub-section: Comma-separated list of variable names. -->
       <constant varName="TimeInterval"> 3600 </constant>
       <!-- Set point changes every 3600 seconds -->
      <outputVariable>V1, V1min, V1max </outputVariable>
       <!-- <matrixFile>"file name contains the ABC from DMDc"</matrixFile> -->
    </ExternalModel>
  </Models>
  <!-- MODEL: From a practical point of view, it can be seen, as a "black box" that, given 
  an input, returns an output. -->

  <Distributions>
    <Uniform name="one">
        <lowerBound>30E6</lowerBound>
        <upperBound>45E6</upperBound>
    </Uniform>
     <!-- Uniform Distribution named "one" -->
  </Distributions>
  <!-- Distributions: The user will specify the probability distributions, that need to be 
  used during the simulation, within the <Distributions> XML block -->

   <Samplers>
    <MonteCarlo name="RG_Sampler">
      <samplerInit>
        <limit>10</limit>
          <!-- For the <samplerInit> for MonteCarlo samplers, <limit> is a required field,
          defining the number of MonteCarlo samples needs to be generated; -->
      </samplerInit>
       <!-- samplerInit: a special node within sampler calss, which contains
       specific parameters that characterize each particular sampler. -->
      <variable name="P1">
          <distribution>one</distribution>
      </variable>
       <!-- Define variable "c" obeys the uniform distribution "one" -->
    </MonteCarlo>
     <!-- A MonteCarlo sampler called "RG_Sampler"  -->
  </Samplers>
  <!-- Samplers: It performs the driving of the specific sampling strategy and, 
  hence, determines the effectiveness of the analysis, from both an accuracy 
  and computational point of view. -->

  <DataObjects>
    <PointSet name="RGInput">
      <Input>P1 </Input>
      <Output>OutputPlaceHolder</Output>
    </PointSet>
     <!-- <PointSet> is a collection of individual objects, each describing the
     state of the system at a certain point (e.g. in time) -->
     <!-- Here is a pointset called "sumOfExponentialInput" consists of the
     3 input variables and 1 output place holder -->
    <PointSet name="RGOutput">
      <Input>P1 </Input>
      <Output>V1, V1min, V1max </Output>
    </PointSet>
     <!-- Here is a pointset called "sumOfExponentialOutput" consists of the
     3 input variables and 2 output variables -->
  </DataObjects>
  <!-- DataObjects: a container of data objects of various types that can be constructed
  during the execution of a particular calculation flow. These data objects can be used as
  input or output for a particular Model. -->

  <Steps>
    <MultiRun name="RGrun">
      <Input          class="DataObjects"   type="PointSet">RGInput</Input>
      <Model          class="Models"        type="ExternalModel">RG</Model>
       <Sampler            class="Samplers"          type="MonteCarlo">RG_Sampler</Sampler>
      <Output         class="DataObjects"   type="PointSet">RGOutput</Output>
    </MultiRun>
     <!-- MultiRun step allows the user to assemble the calculation flow of an analysis that
     requires multiple "runs" of the same model. For example, a monte carlo sampling process. -->
     <!-- MultiRun requires "Input", "Model" and "Output" roles; "Sampler" is optional -->
     
    <IOStep name="printTOfile">
          <Input          class="DataObjects"   type="PointSet">RGOutput</Input>
          <Output         class="OutStreams"    type="Print">RGdumpOutput</Output>
          <!-- Input: names an entity that is going to be used as a source (input) from which
          the information needs to be extracted. -->
     </IOStep>
     <!-- IOStep is the step where the user can perform input/output operations among the different
     I/O entities available in RAVEN. -->
  </Steps>
  <!-- Steps is in charge of assembling different entities in RAVEN (e.g. Samplers, Models, 
  Databases, etc.) in order to perform a task defined by the kind of step being used. A sequence 
  of different Steps represents the calculation flow.-->
 
  <OutStreams>
    <Print name="RGdumpOutput">
      <type>csv</type>
      <source>RGOutput</source>
      <what>input,output</what>
    </Print>
     <!-- Printing system has been created in order to let the user dump the data, contained in the
     internal data objects  -->
          <!-- Name is a user-defined identifier for this data object, also the filename to be written -->
          <!-- type: the output file type -->
          <!-- source: the data name defined in the "Dataobjects" block -->
          <!-- what: optional, but can reduce the number of variables to be outputed -->
  </OutStreams>
  <!-- OutStreams System: The capabilities of visualize(plot) and dump(print) the generated data are 
  contained in the "OutStream" system-->
</Simulation>
